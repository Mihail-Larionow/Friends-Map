@startuml
class com.michel.vkmap.domain.usecases.GetConversationInfoUseCase {
+ void execute(String,(ConversationModel) -> Unit)
}

class com.michel.vkmap.domain.usecases.GetMessagesListUseCase {
+ LiveData<Map<String, String>> execute(String)
}

class com.michel.vkmap.domain.models.NetworkState$Companion {
+ NetworkState LOADED
+ NetworkState LOADING
+ NetworkState ERROR
}

class com.michel.vkmap.domain.models.NetworkState {
}
class com.michel.vkmap.domain.models.LocationDataPackModel {
}
class com.michel.vkmap.domain.usecases.GetFriendsLocationsUseCase {
+ LiveData<Map<String, LiveData<LocationDataModel>>> execute(ArrayList<String>)
}

class com.michel.vkmap.domain.usecases.GetFriendsListUseCase {
+ void execute(String,(ArrayList<String>) -> Unit)
}

class com.michel.vkmap.domain.usecases.AddPlaceMarkUseCase {
+ PlaceMark execute(MapView,LocationDataModel,String)
}

class com.michel.vkmap.domain.models.FirebaseLocationDataModel {
}
class com.michel.vkmap.domain.models.ConversationModel {
}
class com.michel.vkmap.domain.models.ConversationItemModel {
}
class com.michel.vkmap.domain.models.MessageDataPackModel {
}
class com.michel.vkmap.domain.usecases.GetUserInfoUseCase {
+ void execute(String,(UserModel) -> Unit)
}

class com.michel.vkmap.domain.usecases.GetConversationsListUseCase {
+ LiveData<Map<String, String>> execute(String)
}

class com.michel.vkmap.domain.models.UserModel {
}
class com.michel.vkmap.domain.models.MessageModel {
}
class com.michel.vkmap.domain.usecases.GetNetworkStateUseCase {
+ LiveData<NetworkState> execute()
}

class com.michel.vkmap.domain.usecases.SendMessageUseCase {
+ void execute(MessageDataPackModel)
}

class com.michel.vkmap.domain.usecases.TrackLocationUseCase {
+ void execute()
+ void abandon()
}

class com.michel.vkmap.domain.models.UserItemModel {
}
class com.michel.vkmap.domain.models.MessageItemModel {
}
class com.michel.vkmap.domain.usecases.CreateConversationUseCase {
+ String execute(ConversationDataPackModel)
}

class com.michel.vkmap.domain.models.FirebaseConversationDataModel {
}
interface com.michel.vkmap.domain.repository.IRepository {
+ void getUserInfo(String,(UserModel) -> Unit)
+ void getConversationInfo(String,(ConversationModel) -> Unit)
+ void getMessage(String,(MessageModel) -> Unit)
+ void saveLocation(LocationDataPackModel)
+ void saveMessage(MessageDataPackModel)
+ String saveConversation(ConversationDataPackModel)
+ void getFriendsList(String,(ArrayList<String>) -> Unit)
+ LiveData<Map<String, String>> getConversationsList(String)
+ LiveData<Map<String, LiveData<LocationDataModel>>> getFriendsLocations(ArrayList<String>)
+ LiveData<Map<String, String>> getMessagesList(String)
+ LiveData<NetworkState> getNetworkState()
}

class com.michel.vkmap.domain.models.LocationDataModel {
}
class com.michel.vkmap.domain.models.FirebaseMessageDataModel {
}
class com.michel.vkmap.domain.usecases.GetMessageUseCase {
+ void execute(String,(MessageModel) -> Unit)
}

class com.michel.vkmap.domain.usecases.GetUserLocationUseCase {
+ LiveData<LocationDataModel> execute()
}

class com.michel.vkmap.domain.usecases.ZoomUseCase$Companion {
- Float DEFAULT_ZOOM
- Float DEFAULT_AZIMUTH
- Float DEFAULT_TILT
}

class com.michel.vkmap.domain.usecases.ZoomUseCase {
+ void execute(MapView,Double,Double)
}

class com.michel.vkmap.domain.usecases.SaveUserLocationUseCase {
+ void execute(LocationDataPackModel)
}

class com.michel.vkmap.domain.models.ConversationDataPackModel {
}


com.michel.vkmap.domain.models.NetworkState +.. com.michel.vkmap.domain.models.NetworkState$Companion
com.michel.vkmap.domain.usecases.ZoomUseCase +.. com.michel.vkmap.domain.usecases.ZoomUseCase$Companion
@enduml